on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  reusable_action:
    runs-on: ubuntu-latest
    outputs:
      traceparent: ${{ steps.telemetry_setup.outputs.traceparent }}
    steps:
      - name: Checkout actions
        uses: actions/checkout@v4
      - uses: "./.github/actions/context-test"
        id: telemetry_setup
  local_script:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - run: npm install @opentelemetry/api @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-node
      shell: bash
    - uses: actions/github-script@v7
      id: get-job-info
      with:
        retries: 3
        script: |
          const { createHash } = require("crypto");

          // This function is inlined here because sharing files between actions sucks. It is duplicated in telemetry-summarize.
          get_info = async ({github, context, process}) => {
              const runAttempt = parseInt(process.env.GITHUB_RUN_ATTEMPT, 10)

              const trace_id = createHash("sha256")
                  .update(context.repo.owner)
                  .update(context.repo.repo)
                  .update(String(context.runId))
                  .update(String(runAttempt))
                  .digest("hex");

              const job_info = await github.rest.actions.listJobsForWorkflowRunAttempt({
                  attempt_number: runAttempt,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: context.runId
              });

              // We know what the run ID is, but we don't know which specific job we're being run from.
              // https://github.com/orgs/community/discussions/8945
              const this_job = job_info.data.jobs.find((job) => {
                  return job.runner_name === process.env.RUNNER_NAME && job.run_attempt === runAttempt;
              });

              const span_id = createHash("sha256")
                  .update(context.repo.owner)
                  .update(context.repo.repo)
                  .update(String(context.runId))
                  .update(String(runAttempt))
                  .update(this_job.name)
                  .digest("hex");

              return {
                  "job_name": this_job.name,
                  "trace_id": trace_id,
                  "span_id": span_id,
                  "job_info_json": this_job,
                  "traceparent": `00-${trace_id}-${span_id.substring(0,16)}-01`
              }
          };

          var values = undefined;
          var retryCount = 0;
          maxRetries = 5;
          initialDelay = 2000;
          while (values === undefined) {
            values = await get_info({github, context, process});
            if (values === undefined && retryCount < maxRetries) {
              retryCount++;
              const delay = initialDelay * Math.pow(2, retryCount - 1);
            } else {
              break;
            }
          }

          if (values === undefined){
            throw "Telemetry values were not available. Please see debug logs for more info."
          }

          core.setOutput("trace_id", values["trace_id"]);
          core.setOutput("job_info_json", values["job_info_json"]);
          core.setOutput("job_name", values["job_name"]);
          core.setOutput("span_id", values["span_id"]);
          core.setOutput("traceparent", values["traceparent"]);

          const opentelemetry = require('@opentelemetry/api');

          var ctx = opentelemetry.propagation.extract(opentelemetry.context.active(), {"traceparent": values["traceparent"], "tracestate": ""});
          console.log("TRACEPARENT")
          console.log(values["traceparent"])
          console.log("OTel context after extracting")
          console.log(ctx)

          // Outer span for the whole job
          // Create a span. A span must be closed.
          tracer.startActiveSpan("parent job", {startTime: 120}, ctx, (parent_span) => {
            parent_span.setAttribute("startDelay", 123);
            console.log(parent_span)
            console.log("New job step")
            console.log(step)
            tracer.startActiveSpan("child", {startTime: 123}, (step_span) => {
              step_span.setAttribute("startDelay", 256)
              step_span.end(382)
            });
            // Close outer span
            parent_span.end(546)
          });

          console.log(parent_span)